// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VZTest.Data;

#nullable disable

namespace VZTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VZTest.Models.Test.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttemptId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Answers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Answer");
                });

            modelBuilder.Entity("VZTest.Models.Test.Attempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("VZTest.Models.Test.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Correct")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("VZTest.Models.Test.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("VZTest.Models.Test.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.DateAnswer", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<double>("Answer")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("DateAnswer");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.DateAnswerOptional", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<DateTime?>("Answer")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateAnswerOptional_Answer");

                    b.HasDiscriminator().HasValue("DateAnswerOptional");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.DoubleAnswer", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<double>("Answer")
                        .HasColumnType("float")
                        .HasColumnName("DoubleAnswer_Answer");

                    b.HasDiscriminator().HasValue("DoubleAnswer");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.DoubleAnswerOptional", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<double?>("Answer")
                        .HasColumnType("float")
                        .HasColumnName("DoubleAnswerOptional_Answer");

                    b.HasDiscriminator().HasValue("DoubleAnswerOptional");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.IntAnswer", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("IntAnswer_Answer");

                    b.HasDiscriminator().HasValue("IntAnswer");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.IntAnswerOptional", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<int?>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("IntAnswerOptional_Answer");

                    b.HasDiscriminator().HasValue("IntAnswerOptional");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.RadioAnswer", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasIndex("OptionId");

                    b.HasDiscriminator().HasValue("RadioAnswer");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.RadioAnswerOptional", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("RadioAnswerOptional_OptionId");

                    b.HasIndex("OptionId");

                    b.HasDiscriminator().HasValue("RadioAnswerOptional");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.TextAnswer", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextAnswer_Answer");

                    b.HasDiscriminator().HasValue("TextAnswer");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.TextAnswerOptional", b =>
                {
                    b.HasBaseType("VZTest.Models.Test.Answer");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextAnswerOptional_Answer");

                    b.HasDiscriminator().HasValue("TextAnswerOptional");
                });

            modelBuilder.Entity("VZTest.Models.Test.Attempt", b =>
                {
                    b.HasOne("VZTest.Models.Test.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("VZTest.Models.Test.Option", b =>
                {
                    b.HasOne("VZTest.Models.Test.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("VZTest.Models.Test.Question", b =>
                {
                    b.HasOne("VZTest.Models.Test.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.RadioAnswer", b =>
                {
                    b.HasOne("VZTest.Models.Test.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("VZTest.Models.Test.Answers.RadioAnswerOptional", b =>
                {
                    b.HasOne("VZTest.Models.Test.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.Navigation("Option");
                });
#pragma warning restore 612, 618
        }
    }
}
