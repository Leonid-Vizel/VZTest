@using Microsoft.AspNetCore.Identity
@using VZTest.Models.Test
@model TestCreateModel
@inject SignInManager<IdentityUser> signInManager
@{
    ViewData["Title"] = "Создание теста";
}

@if (!signInManager.IsSignedIn(User))
{
    <partial name="_AuthorisePartial" />
    return;
}

@section Scripts {
<partial name="_ValidationScriptsPartial" />
}
<script src="~/js/FloatInputLimit.js"></script>
<script src="~/js/SetNumberValidationScript.js"></script>
<style>
    hr {
        margin: 0.5rem 0;
    }
</style>

<script id="QuestionBlock" type="text/html">
    <h5 id = "questionHeader-{questionId}">Вопрос #{questionIdPlus}</h5>
    <div class="input-group">
        <input id = "Questions[{questionId}].Title" type = "text" class="form-control" placeholder = "Название"/>
        <div class="input-group-append">
            <select class="form-select" id = "Questions[{questionId}].Type" onchange = "OnSelectAnswer({questionId})">
                <option value="0" selected>Текст</option>
                <option value="1">Радио-кнопки</option>
                <option value="2">Флажки</option>
                <option value="3">Целое число</option>
                <option value="4">Дробное число</option>
                <option value="5">Дата</option>
            </select>
        </div>
        <div class="input-group-append">
            <a class = "btn btn-outline-danger" id = 'btn-delete-{questionId}' onclick = "DeleteAndCheckQuestion({questionId})"><i class="bi bi-x-circle-fill"></i></a>
        </div>
    </div>
    <div class = "px-3">
        <h5>Баллы за ответ:</h5>
        <input id = "Questions[{questionId}].Balls" type = "number" class="form-control" placeholder = "Баллы"/>
        <h5 id = "CorrectLabel-{questionId}">Правильный ответ:</h5>
        <input id = "Questions[{questionId}].Correct" type = "text" class="form-control" placeholder = "Ответ"/>
    </div>
    <hr>
</script>

<script id="RadioOptionBlock" type="text/html">
    <div class="input-group-prepend">
        <input id = "Questions[{questionId}].Correct" class="form-check-input" type = "radio" />
    </div>
    <input id = "Questions[{questionId}].Options[{optionId}].Text" class="form-control" placeholder = "Название опции"/>
    <div class="input-group-append">
        <a class = "btn btn-outline-danger" id = "delete-question-{questionId}-option-{optionId}" onclick = 'DeleteRadioOption({questionId},{optionId})'><i class="bi bi-x-circle-fill"></i></a>
    </div>
</script>

<script id="CheckOptionBlock" type="text/html">
    <div class="input-group-prepend">
        <input id = "Questions[{questionId}].Correct" class="form-check-input" type = "checkbox" />
    </div>
    <input id = "Questions[{questionId}].Options[{optionId}].Text" class="form-control" placeholder = "Название опции"/>
    <div class="input-group-append">
        <a class = "btn btn-outline-danger" id = "delete-question-{questionId}-option-{optionId}" onclick = 'DeleteCheckOption({questionId},{optionId})'><i class="bi bi-x-circle-fill"></i></a>
    </div>
</script>

<script>
    function AddQuestion()
    {
        var questionCount = document.getElementsByName('questionContainer').length;
        var div = document.createElement('div');
        div.setAttribute('class', 'container mt-3');
        div.setAttribute('name', 'questionContainer');
        div.setAttribute('id', questionCount);
        var elementAfter = document.getElementById('addQuestionBtn');
        div.innerHTML = document.getElementById('QuestionBlock').innerHTML.replace(/{questionId}/g, questionCount).replace(/{questionIdPlus}/g, questionCount+1);
        elementAfter.insertAdjacentElement('beforebegin', div);
        div.scrollIntoView();
    }

    function DeleteQuestion()
    {

    }

    function RenameQuestion(pastId, newId)
    {

    }

    function AddRadioOption(questionId)
    {
        var optionCount = document.getElementsByName('option-'+questionId).length;
        var optionBlock = document.getElementById('RadioOptionBlock').innerHTML.replace(/{questionId}/g, questionId).replace(/{optionId}/g, optionCount);
        var creatorButton = document.getElementById('Creator-' + questionId);
        var optionDiv = document.createElement('div');
        if (optionBlock == null || creatorButton == null || optionDiv == null)
        {
            return;
        }
        optionDiv.setAttribute('id','option-'+questionId+'-'+optionCount);
        optionDiv.setAttribute('name','option-'+questionId);
        optionDiv.setAttribute('class','input-group mb-3 px-3');
        optionDiv.innerHTML = optionBlock;
        creatorButton.insertAdjacentElement('BeforeBegin',optionDiv);
    }

    function DeleteRadioOption(questionId, optionId)
    {

    }

    function DeleteOptions(questionId)
    {
        var elements = document.getElementsByName('option-'+questionId);
        while (elements.length > 0)
        {
            elements[0].remove();
        }
    }

    function AddCheckOption(questionId)
    {
        var optionCount = document.getElementsByName('option-'+questionId).length;
        var optionBlock = document.getElementById('CheckOptionBlock').innerHTML.replace(/{questionId}/g, questionId).replace(/{optionId}/g, optionCount);
        var creatorButton = document.getElementById('Creator-' + questionId);
        var optionDiv = document.createElement('div');
        if (optionBlock == null || creatorButton == null || optionDiv == null)
        {
            return;
        }
        optionDiv.setAttribute('id','option-'+questionId+'-'+optionCount);
        optionDiv.setAttribute('name','option-'+questionId);
        optionDiv.setAttribute('class','input-group mb-3 px-3');
        optionDiv.innerHTML = optionBlock;
        creatorButton.insertAdjacentElement('BeforeBegin',optionDiv);
    }

    function DeleteCheckOption(questionId, optionId)
    {

    }

    function CheckCorrectInputCreated(id)
    {
        var correctInput = document.getElementById('Questions[' + id + '].Correct');
        var correctLabel = document.getElementById('CorrectLabel-' + id);
        var ballsInput = document.getElementById('Questions[' + id + '].Balls');
        if (correctInput == null)
        {
            correctInput = document.createElement('input');
            correctInput.setAttribute('class','form-control');
            correctInput.setAttribute('placeholder','Ответ');
            correctInput.setAttribute('id','Questions[' + id + '].Correct');
            if (correctLabel != null)
            {
                correctLabel.insertAdjacentElement('afterend', correctInput);
            }
            else
            {
                ballsInput.insertAdjacentElement('afterend', correctInput);
            }
        }
        if (correctLabel == null)
        {
            correctLabel = document.createElement('h5');
            correctLabel.setAttribute('id','CorrectLabel-' + id);
            correctLabel.innerHTML = 'Баллы за ответ:';
            ballsInput.insertAdjacentElement('afterend', correctLabel);
        }
        return correctInput;
    }

    function DeleteCorrectInput(id)
    {
        var correctInput = document.getElementById('Questions[' + id + '].Correct');
        var correctLabel = document.getElementById('CorrectLabel-' + id);
        if (correctInput == null)
        {
            return;
        }
        correctInput.remove();
        if (correctLabel == null)
        {
            return;
        }
        correctLabel.remove();
    }

    function AddRadioCreator(questionId)
    {
        var creator = document.getElementById('Creator-' + questionId);
        if (creator != null)
        {
            creator.setAttribute('onclick','AddRadioOption('+questionId+');');
            return;
        }
        var button = document.createElement('a');
        button.setAttribute('id','Creator-' + questionId);
        button.setAttribute('class','btn btn-outline-info mt-2');
        button.setAttribute('onclick','AddRadioOption('+questionId+');');
        button.innerHTML = "<i class=\"bi bi-plus-circle\"></i> Добавить опцию";
        var ballsInput = document.getElementById('Questions[' + questionId + '].Balls');
        ballsInput.insertAdjacentElement('afterend', button);
    }

    function DeleteCreator(questionId)
    {
        var creator = document.getElementById('Creator-' + questionId);
        if (creator == null)
        {
            return;
        }
        creator.remove();
    }

    function AddCheckCreator(questionId)
    {
        var creator = document.getElementById('Creator-' + questionId);
        if (creator != null)
        {
            creator.setAttribute('onclick','AddCheckOption('+questionId+');');
            return;
        }
        var button = document.createElement('a');
        button.setAttribute('id','Creator-' + questionId);
        button.setAttribute('class','btn btn-outline-info mt-2');
        button.setAttribute('onclick','AddCheckOption('+questionId+');');
        button.innerHTML = "<i class=\"bi bi-plus-circle\"></i> Добавить опцию";
        var ballsInput = document.getElementById('Questions[' + questionId + '].Balls');
        ballsInput.insertAdjacentElement('afterend', button);
    }

    function OnSelectAnswer(id)
    {
        var correctInput;
        var element = document.getElementById('Questions[' + id + '].Type');
        if (element == null)
        {
            return;
        }
        switch(element.value)
        {
            case '0':
                DeleteOptions(id);
                DeleteCreator(id);
                correctInput = CheckCorrectInputCreated(id);
                correctInput.value = null;
                correctInput.removeAttribute('onkeypress');
                correctInput.setAttribute('type', 'text');
                break;
            case '1':
                DeleteCorrectInput(id);
                AddRadioCreator(id);
                break;
            case '2':
                DeleteCorrectInput(id);
                AddCheckCreator(id);
                break;
            case '3':
                DeleteOptions(id);
                DeleteCreator(id);
                correctInput = CheckCorrectInputCreated(id);
                correctInput.value = null;
                correctInput.removeAttribute('onkeypress');
                correctInput.setAttribute('type', 'number');
                break;
            case '4':
                DeleteOptions(id);
                DeleteCreator(id);
                correctInput = CheckCorrectInputCreated(id);
                correctInput.value = null;
                correctInput.setAttribute('onkeypress', 'KeyPress(event);');
                correctInput.setAttribute('type', 'text');
                break;
            case '5':
                DeleteOptions(id);
                DeleteCreator(id);
                correctInput = CheckCorrectInputCreated(id);
                correctInput.value = null;
                correctInput.removeAttribute('onkeypress');
                correctInput.setAttribute('type', 'date');
                break;
        }
    }
</script>

<h2><i class="bi bi-plus-circle"></i> @ViewData["Title"]</h2>
<hr>

<form method="post">
    <div>
        <label asp-for="Title"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div>
        <label asp-for="Description"></label>
        @Html.TextAreaFor(x=>x.Description, new {@class = "form-control"})
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <hr>
    <h2><i class="bi bi-gear"></i> Настройки</h2>

    <div>
        <label asp-for="Password"></label>
        <input asp-for="Password" class="form-control" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>

    <div>
        <label asp-for="MaxAttempts"></label>
        <input asp-for="MaxAttempts" class="form-control" />
        <span asp-validation-for="MaxAttempts" class="text-danger"></span>
    </div>

    <div class="form-check">
        <input asp-for="Shuffle" class="form-check-input" type="checkbox" id="anonBox" onchange="CheckAnonimOneOff()">
        <label asp-for="Shuffle" class="form-check-label"></label>
    </div>
    <hr>
    @if (Model?.Questions != null)
    {
        //Loading already created ones
        foreach (QuestionBlueprint question in Model.Questions)
        {
            <hr>
        }
    }
    <a class="btn btn-outline-info mt-2" id="addQuestionBtn" onclick="AddQuestion()"><i class="bi bi-plus-circle-dotted"></i> Добавить вопрос</a>
    <hr>
    <button class="btn btn-outline-primary" type="submit"><i class="bi bi-send-fill"></i> Отправить</button>
</form>