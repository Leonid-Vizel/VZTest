@using Microsoft.AspNetCore.Identity
@using VZTest.Instruments
@using VZTest.Models.DataModels.Test
@using VZTest.Models.Enumerations.Test
@using VZTest.Models.ViewModels.Test
@inject SignInManager<IdentityUser> signInManager
@model ResultViewModel
@{
    ViewData["Title"] = "Простотр попытки";
    int percent = 0;
    int questionCount = 0;
    if (Model.Attempt != null)
    {
        questionCount = Model.Test.Questions.Count();
        percent = (int)((Model.Attempt.Balls / Model.MaxBalls) * 100);
    }
}

@if (!signInManager.IsSignedIn(User))
{
    <partial name="Errors/_AuthorisePartial" />
    return;
}

@if (Model == null)
{
    <partial name="Errors/_ErrorPartial" />
    return;
}

@if (Model.Forbidden)
{
    <partial name="Errors/_ForbiddenPartial" />
    return;
}

@if (Model.NotFound)
{
    <partial name="Errors/_NotFoundPartial" />
    return;
}

<link rel="stylesheet" href="~/css/PercentCircle.css" asp-append-version="true">
<link rel="stylesheet" href="~/css/CenterFlex.css" asp-append-version="true">

<h2><i class="bi bi-eye-fill"></i> Просмотр попытки</h2>
<hr>

<h5>Тест: @Model.Test.Title</h5>
<h5>Попытка от @Model.Attempt.TimeStarted</h5>
<hr>
<div class="flex-wrapper">
    <div class="single-chart">
        <svg viewBox="0 0 36 36" class="circular-chart green">
            <path class="circle-bg"
                  d="M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831" />
            <path class="circle"
                  stroke-dasharray="@percent, 100"
                  d="M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831" />
            <text x="18" y="20.35" class="percentage">@Model.Attempt.Balls / @Model.MaxBalls</text>
        </svg>
    </div>
    <div class="center">
        <h5>Правильные ответы: @Model.Attempt.CorrectAnswers / @questionCount</h5>
        <h5>Процент выполнения: @(Math.Round((double)Model.Attempt.CorrectAnswers/questionCount*100))%</h5>
        <h5>Процент баллов: @(Math.Round(Model.Attempt.Balls/Model.MaxBalls*100,2))%</h5>
    </div>
</div>
<hr>
@for (int i = 0; i < Model.Test.Questions.Count; i++)
{
    QuestionModel question = Model.Test.Questions[i];
    <h3 class="mt-2">
        Вопрос #@(i + 1)
        @if (Model.Attempt.Answers[i].Balls == question.Balls)
        {
            <span style="color: #50c878;">(@question.Balls @WordHelp.Inflect((int)question.Balls, "баллов", "балл", "балл"))</span>
        }
        else if (Model.Attempt.Answers[i].Balls != 0 && Model.Attempt.Answers[i].Balls < question.Balls)
        {
            <span style="color: #ff6800;">(@Model.Attempt.Answers[i].Balls @WordHelp.Inflect((int)Model.Attempt.Answers[i].Balls, "баллов", "балл", "балл"))</span>
        }
        else
        {
            <span style="color: #DC143C;">(0 баллов)</span>
        }
    </h3>
    <h6>
        <span class="text-muted">Задание: </span>
        @question.Title
    </h6>
    @if (question.ImageUrl != null)
    {
        <img class="img-fluid rounded" src="@question.ImageUrl">
    }
    @switch (question.Type)
    {
        case QuestionType.Text:
            <textarea class="form-control" disabled>@Model.Attempt.Answers[i].TextAnswer</textarea>
            break;
        case QuestionType.Date:
            <input asp-for="Attempt.Answers[i].DateAnswer" type="date" class="form-control" disabled />
            break;
        case QuestionType.Int:
            <input asp-for="Attempt.Answers[i].IntAnswer" class="form-control" disabled />
            break;
        case QuestionType.Double:
            <input asp-for="Attempt.Answers[i].DoubleAnswer" class="form-control" disabled />
            break;
        case QuestionType.Radio:
            @foreach (Option option in question.Options)
            {
                <div class="form-check">
                    <input asp-for="Attempt.Answers[i].IntAnswer" class="form-check-input" type="radio" value="@option.Id" disabled>
                    <label class="form-check-label">@option.Title</label>
                </div>
            }
            break;
        case QuestionType.Check:
            @foreach (Option option in question.Options)
            {
                int[] checkedIds = ArrayTransformer.ToIntArray(Model.Attempt.Answers[i].TextAnswer, '-');
                <div class="form-check">
                    @if (checkedIds.Contains(option.Id))
                    {
                        <input class="form-check-input" type="checkbox" value="@option.Id" disabled checked>
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" value="@option.Id" disabled>
                    }
                    <label class="form-check-label">@option.Title</label>
                </div>
            }
            break;
    }
    @if (Model.Attempt.Answers[i].Balls == question.Balls)
    {
        <h6 style="color: #50c878;">Правильно!</h6>
    }
    else if (Model.Attempt.Answers[i].Balls != 0)
    {
        <h6 style="color: #ff6800;">Частично правильно!</h6>
    }
    else
    {
        <h6 style="color: #DC143C;">Неправильно!</h6>
    }
}